#ifndef BENCH
#undef _GLIBCXX_DEBUG
#pragma GCC optimize "Ofast,unroll-loops,omit-frame-pointer,inline"
//#pragma GCC optimize "Ofast,unroll-loops,omit-frame-pointer"
#pragma GCC option("arch=native", "tune=native", "no-zero-upper")
#pragma GCC target("movbe,aes,pclmul,avx,avx2,f16c,fma,sse3,ssse3,sse4.1,sse4.2,rdrnd,popcnt,bmi,bmi2,lzcnt")
#endif
#include <bits/stdc++.h>
#include <x86intrin.h> 

using namespace std;
using u64 = uint64_t;
using u32 = uint32_t;
using u16 = uint16_t;
using u8 = uint8_t;
const u32 legal[] ={};
const int perm[8][9] = {
	{0,1,2,3,4,5,6,7,8},
	{6,3,0,7,4,1,8,5,2}, //r
	{8,7,6,5,4,3,2,1,0},
	{2,5,8,1,4,7,0,3,6},
	{2,1,0,5,4,3,8,7,6}, //s
	{0,3,6,1,4,7,2,5,8}, //sr
	{6,7,8,3,4,5,0,1,2},
	{8,5,2,7,4,1,6,3,0},
};
const int compo[8][8] = {
	{0,1,2,3,4,5,6,7},
	{1,2,3,0,7,4,5,6},
	{2,3,0,1,6,7,4,5},
	{3,0,1,2,5,6,7,4},
	{4,5,6,7,0,1,2,3},
	{5,6,7,4,3,0,1,2},
	{6,7,4,5,2,3,0,1},
	{7,4,5,6,1,2,3,0}
};
const u64 U = 0'070'000'000ULL << (3*4);
const u64 L = 0'000'700'000ULL << (3*4);
const u64 C = 0'000'070'000ULL << (3*4);
const u64 R = 0'000'007'000ULL << (3*4);
const u64 D = 0'000'000'070ULL << (3*4);
constexpr u64 capMask[12] = {0, R|D, L|D, L|R, U|D, U|R, U|L, L|R|D, U|R|D, U|L|D, U|L|R, U|L|R|D};
constexpr u32 M30 = 0x3fffffff;
constexpr u32 P10[9] = {100'000'000, 10'000'000, 1'000'000, 100'000, 10'000, 1'000, 100, 10, 1};

using State = u32;
const u32 HASHMAX = (1<<18);
constexpr bool isFinal(State s)
{
	return 0 == ((s-0111111111) & ~s & 0444444444);
}
struct Hashmap {
	u32 *key[2];
	u32 *val[2];
	u32	capG = 1<<12;
	size_t cap[2] = {capG, capG};
	u32 size[2];

	Hashmap() {
		size[0] = 0;
		size[1] = 0;
		key[0] = new u32[capG]();
		key[1] = new u32[capG]();
		val[0] = new u32[8*capG]();
		val[1] = new u32[8*capG]();
	}

	u32* find(bool sub, u32 s) {
		//u16 hash = (s * 0x80008001) >> 16;
		//u16 hash = (s * 2654435761) >> 11;
		u32 h = s;
		h^=(h>>13), h^=(h<<7), h^=(h>>17);
		h &= cap[sub]-1;
		while (key[sub][h] && key[sub][h] != s) {
			h = (h+1) & (cap[sub]-1);
		}
		size[sub] += key[sub][h]==0;
		key[sub][h] = s;
		return &(val[sub][8*h]);
	}

	void clear(bool sub) {
		//cerr << fixed << setprecision(2);
		//cerr << size[sub] << " entries : " << ((100.0)*size[sub])/(cap[sub]) <<"\n";

		if (3*size[!sub] > 2*capG && capG < HASHMAX)
			capG *= 2;
		if (cap[sub] != capG) {
			cap[sub] = capG;
			delete key[sub];
			delete val[sub];
			key[sub] = new u32[cap[sub]]();
			val[sub] = new u32[8*cap[sub]]();
		} else {
			memset(key[sub], 0, cap[sub]*sizeof(u32));
			memset(val[sub], 0, 8*cap[sub]*sizeof(u32));
		}
		size[sub] = 0;
	}
};

Hashmap memo;

constexpr u32 posShift(u8 val, u8 pos) {
	u32 res = val;
	return res << (3*pos);
}

constexpr int at(State s, u8 pos) {
	return (s>>(3*pos))&7;
}

u32 addToRes(State s, u32 cnt[8]) {
	u32 res = 0;
	for (int pos = 0; pos < 9; pos++)
		for (int per = 0; per < 8; per++)
			res += P10[perm[per][pos]] * at(s,pos) * cnt[per];
	return res;
}

constexpr u16 neigh(u32 g, u8 pos) {
	constexpr u16 oobMask[9] = {077, 07, 0707, 070, 0, 0700, 07070, 07000, 07700};
	u64 hood = g;
	hood <<= 3*(8-pos); 
	hood = ((hood&U)>>(3*8)) | ((hood&L)>>(3*7)) | ((hood&R)>>(3*6)) | ((hood&D)>>(3*5));
	return hood | oobMask[pos];
} 
u16 neigh2(u32 g, u8 pos) {
	constexpr u16 oobMask[9] = {077, 07, 0707, 070, 0, 0700, 07070, 07000, 07700};
	u64 hood = g;
	hood <<= 3*(8-pos); 
	hood = _pext_u64(hood, U|L|R|D);
	return hood | oobMask[pos];
} 

constexpr State nextS(State s, u8 pos, u8 capt) {
	u32 m = capMask[capt]>>(3*(8-pos));

	u32 val = s&m;
	val = val*0111111111;
	val = (val>>(3*8))&7;
	val += capt==0;

	return (s&~m) | posShift(val, pos);
}

constexpr State p1(State s) {
	return 
		((s&(0'700'007'000))>>6)
		| ((s&(0'070'000'000))>>12)
		| ((s&(0'007'000'000))>>18)
		| ((s&(0'000'700'007))<<6)
		| (s&(0'000'070'000))
		| ((s&(0'000'000'700))<<18)
		| ((s&(0'000'000'070))<<12);
}
constexpr State p2(State s) {
	return 
		((s&(0'700'000'000))>>24)
		| ((s&(0'070'000'000))>>18)
		| ((s&(0'007'000'000))>>12)
		| ((s&(0'000'700'000))>>6)
		| (s&(0'000'070'000))
		| ((s&(0'000'007'000))<<6)
		| ((s&(0'000'000'700))<<12)
		| ((s&(0'000'000'070))<<18)
		| ((s&(0'000'000'007))<<24);
}
constexpr State p3(State s) {
	return 
		((s&(0'700'000'000))>>18)
		| ((s&(0'070'000'700))>>6)
		| ((s&(0'007'000'070))<<6)
		| ((s&(0'000'700'000))>>12)
		| (s&(0'000'070'000))
		| ((s&(0'000'007'000))<<12)
		| ((s&(0'000'000'007))<<18);
}
constexpr State p4(State s) {
	return 
		(s&(0'070'070'070))
		| ((s&(0'700'700'700))>>6)
		| ((s&(0'007'007'007))<<6);
}
constexpr State p5(State s) {
	return 
		(s&0'700'070'007)
		| ((s&(0'070'007'000))>>6)
		| ((s&(0'007'000'000))>>12)
		| ((s&(0'000'700'070))<<6)
		| ((s&(0'000'000'700))<<12);
}
constexpr State p6(State s) {
	return 
		((s&(0'777'000'000))>>18)
		| (s&(0'000'777'000))
		| ((s&(0'000'000'777))<<18);
}
constexpr State p7(State s) {
	return 
		((s&(0'700'000'000))>>24)
		| ((s&(0'070'700'000))>>12)
		| (s&(0'007'070'700))
		| ((s&(0'000'007'070))<<12)
		| ((s&(0'000'000'007))<<24);
}

pair<u32, u8> canon(State s) {
	u32 pr = 0;
	u32 st[8] = {s, p1(s), p2(s), p3(s), p4(s), p5(s), p6(s), p7(s)};
	for (int i = 1; i < 8; i++)
		if (st[i] < st[0])
			st[0] = st[i], pr = i;
	return {st[0], pr};
}

void insert(bool sub, State s, u32 cnt[8]) {
	pair<u32, u8> p = canon(s);
	
	u32* entry = memo.find(sub, p.first);
	for (int i = 0; i < 8; i++) {
		entry[compo[p.second][i]] += cnt[i];
	}

}

int parse() {
	int depth;
	cin >> depth; cin.ignore();
	u32 s = 0;
	for (int i = 0; i < 9; i++) {
		u32 val;
		cin >> val; cin.ignore();
		s = s | (val<<(3*i));
	}
	u32 cnt[8] = {1,0,0,0,0,0,0,0};
	for (u8 pos = 0; pos < 9; pos++) {
		if (at(s,pos))
			continue;
		u16 capMask = legal[neigh(s, pos)];
		for (int capt = 0; capt < 12; capt++) {
			if (!(capMask & (1<<capt)))
				continue;
			State next = nextS(s, pos, capt);
			insert(0, next, cnt);
		}
	}
	return depth;
}

u32 solve()
{
	int depth = parse();
	u32 res = 0;
	bool sub = 0;
	for (int d = depth-1; d > 0; d--, sub ^= 1) {
		for (int i = 0; i < memo.cap[sub]; i++) {
			if (!memo.key[sub][i])
				continue;
			bool final = true;
			State s = memo.key[sub][i];
			u32* cnt = &(memo.val[sub][8*i]);
			for (u8 pos = 0; pos < 9; pos++) {
				if (at(s,pos))
					continue;
				final = false;
				u16 capMask = legal[neigh(s, pos)];
				for (int capt = 0; capt < 12; capt++) {
					if (!(capMask & (1<<capt)))
						continue;
					State next = nextS(s, pos, capt);
					insert(!sub, next, cnt);
				}
			}
			if (final) {
				res += addToRes(s, cnt);
			}
		}
		memo.clear(sub);
	}
	for (int i = 0; i < memo.cap[sub]; i++) {
		if (!memo.key[sub][i])
			continue;
		res += addToRes(memo.key[sub][i], &(memo.val[sub][8*i]));
	}

	return res&M30;
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);

	cout << solve() << '\n';
}
